name: Build and Upload Marp Presentations on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  upload-to-google-drive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 4  # Ensures we have at least the previous commit for diffing

      - name: List Available Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(artifacts.artifacts.map(a => a.name));

      - name: Get last commit SHA from merged PR
        id: get_sha
        run: |
          SHA=$(git rev-parse HEAD^2)
          echo "MERGED_PR_SHA=$SHA" >> $GITHUB_ENV

      - name: Download Converted Files
        uses: actions/download-artifact@v4
        with:
          name: converted-presentations-${{ env.MERGED_PR_SHA }}
          path: temp_output

      - name: Check if Files Exist
        id: check-files
        shell: bash
        run: |
          if [ -d "temp_output" ] && [ "$(ls -A temp_output)" ]; then
            echo "HAS_FILES=true" >> $GITHUB_ENV
          else
            echo "HAS_FILES=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: env.HAS_FILES == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        if: env.HAS_FILES == 'true'
        run: |
          pip install -r requirements.txt

      - name: Create Google Drive Credentials File
        if: env.HAS_FILES == 'true'
        run: |
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > creds.json

      - name: Upload Converted Files to Google Drive
        if: env.HAS_FILES == 'true'
        env:
            GRADE_5_FOLDER_ID: ${{ vars.GRADE_5_FOLDER_ID }}
            GRADE_6_FOLDER_ID: ${{ vars.GRADE_6_FOLDER_ID }}
            GRADE_7_FOLDER_ID: ${{ vars.GRADE_7_FOLDER_ID }}
        run: |
          for file in $(find temp_output -type f); do
            RELATIVE_PATH="${file#temp_output/}"
            DIR_NAME=$(dirname "$RELATIVE_PATH" | cut -d'/' -f1)
            TARGET_FOLDER_ID_VAR="GRADE_${DIR_NAME}_FOLDER_ID"
            TARGET_FOLDER_ID="${!TARGET_FOLDER_ID_VAR}"
            TARGET_FILE_NAME=$(basename "$RELATIVE_PATH")
            TARGET_PATH="$TARGET_FOLDER_ID:$TARGET_FILE_NAME"

            if [ -z "$TARGET_FOLDER_ID" ]; then
              echo "Warning: No Google Drive folder ID found for $DIR_NAME. Skipping upload."
            else
              echo "Uploading $file to $TARGET_PATH"
              python google_drive_upload.py "$file" "$TARGET_PATH"
            fi
          done
