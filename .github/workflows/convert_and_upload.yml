name: Build and Upload Marp Presentations on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  build-presentations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures we have at least the previous commit for diffing

      - name: Find Changed Markdown Files in Content Directory
        id: changed-md
        run: |
          BASE_SHA="HEAD^"
          HEAD_SHA="HEAD"
          
          # Find changed files only in the content directory
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- 'content/*.md' | tr '\n' ' ')
          echo "CHANGED_FILES=${CHANGED_FILES}" >> $GITHUB_ENV

      - name: Create Temporary Directory
        run: |
          mkdir -p temp_output
          chmod -R 777 temp_output  # Ensure write permissions
          echo "TEMP_DIR=temp_output" >> $GITHUB_ENV

      - name: Convert Markdown to HTML and PDF using Marp CLI
        if: env.CHANGED_FILES != ''
        run: |
          for file in $CHANGED_FILES; do
            RELATIVE_PATH="${file#content/}"
            OUTPUT_DIR="$TEMP_DIR/$(dirname "$RELATIVE_PATH")"
            mkdir -p "$OUTPUT_DIR"
            chmod -R 777 "$OUTPUT_DIR"  # Ensure write permissions
            
            # Run Marp CLI without specifying a user to avoid permission issues
            docker run --rm -v "$PWD:/workspace" -w /workspace ghcr.io/marp-team/marp-cli "$file" --output "$OUTPUT_DIR/$(basename "${file%.md}.html")"
            docker run --rm -v "$PWD:/workspace" -w /workspace ghcr.io/marp-team/marp-cli "$file" --output "$OUTPUT_DIR/$(basename "${file%.md}.pdf")"
          done

      - name: Upload Converted Files as Artifact
        if: env.CHANGED_FILES != ''
        uses: actions/upload-artifact@v4
        with:
          name: converted-presentations
          path: temp_output

  upload-to-google-drive:
    runs-on: ubuntu-latest
    needs: build-presentations
    if: always()  # Ensure job runs even if there are no changed files

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Converted Files
        uses: actions/download-artifact@v4
        with:
          name: converted-presentations
          path: temp_output
        continue-on-error: true  # Prevent failure if no artifact exists

      - name: Check if Files Exist
        id: check-files
        shell: bash
        run: |
          if [ -d "temp_output" ] && [ "$(ls -A temp_output)" ]; then
            echo "HAS_FILES=true" >> $GITHUB_ENV
          else
            echo "HAS_FILES=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: env.HAS_FILES == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        if: env.HAS_FILES == 'true'
        run: |
          pip install -r requirements.txt

      - name: Create Google Drive Credentials File
        if: env.HAS_FILES == 'true'
        run: |
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > creds.json

      - name: Upload Converted Files to Google Drive
        if: env.HAS_FILES == 'true'
        run: |
          for file in $(find temp_output -type f); do
            RELATIVE_PATH="${file#temp_output/}"
            DIR_NAME=$(dirname "$RELATIVE_PATH" | cut -d'/' -f1)
            TARGET_FOLDER_ID_VAR="GRADE_${DIR_NAME}_FOLDER_ID"
            TARGET_FOLDER_ID="${!TARGET_FOLDER_ID_VAR}"
            TARGET_FILE_NAME=$(basename "$RELATIVE_PATH")
            TARGET_PATH="$TARGET_FOLDER_ID:$TARGET_FILE_NAME"
            
            if [ -z "$TARGET_FOLDER_ID" ]; then
              echo "Warning: No Google Drive folder ID found for $DIR_NAME. Skipping upload."
            else
              echo "Uploading $file to $TARGET_PATH"
              # python google_drive_upload.py "$file" "$TARGET_PATH"
            fi
          done
